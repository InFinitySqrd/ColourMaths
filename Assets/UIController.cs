using UnityEngine;
using System.Collections;

public class UIController : MonoBehaviour {
	// Declare variables
	// Get a reference to the target colour
	[SerializeField] Material playerColour;

	// Get a refernece to the goal colour
	[SerializeField] RandomColourAssignment goalColour;

	// Create an array to store the current colour generated by the player
	private int[] currentColour; 

	// Keep a tally of the number of colours entered by the player
	private int numColours = 0;

	// Variable to track whether the user has debug controls enabled or not
	private bool debugEnabled = false;

	// Initialise all required values
	void Awake () {
		// Set the initial colour of the player cube
		playerColour.SetColor("_Color", new Color(0,0,0));

		// Initialise the array of colours the player will be using
		currentColour = new int[3];

		// Set all the starting colour values to 0
		for (int i = 0; i < currentColour.Length; i++) {
			currentColour[i] = 0;
		}
	}

	// Function called every frame
	void Update() {
		if ((Input.touches.Length > 2 && Input.touches[2].phase == TouchPhase.Began) || Input.GetKeyDown(KeyCode.Space)) {
			debugEnabled = !debugEnabled;
		}
	}

	void OnGUI() {
		// Button to reset the game and get a new colour
		if (GUI.Button(new Rect(0.0f, 0.0f, Screen.width / 5.0f, Screen.width / 5.0f), "New Game")) {
			goalColour.CreateColour();
		}

		// Button to clear previously entered colours
		if (GUI.Button(new Rect(Screen.width - Screen.width / 5.0f, 0.0f, Screen.width / 5.0f, Screen.width / 5.0f), "Clear")) {
			ClearPlayerColour();
		}

		GUIStyle style = new GUIStyle();
		style.normal.textColor = Color.white;
		style.fontSize = 32;
		style.alignment = TextAnchor.MiddleCenter;

		// Label to display the player's current score
		GUI.Box(new Rect(Screen.width / 2.0f - Screen.height / 10.0f, 0.0f, Screen.height / 5.0f, Screen.height / 5.0f), PlayerPrefs.GetInt("score").ToString(), style);

		DrawColourButtons();
		CreateDebugMenu();
	}

	void DrawColourButtons() {
		// Button to add red to the colour
		if (GUI.Button(new Rect(0.0f, 4.0f * Screen.height / 5.0f, Screen.width / 3.0f, Screen.width / 3.0f), "Red")) {
			// Increment the value for the red colour component
			currentColour[0]++;
			
			// Increment the number of colours added by the player
			numColours++;
			
			// Assign the new colour to the player
			UpdatePlayerColour();
		}
		
		// Button to add green to the colour
		if (GUI.Button(new Rect(Screen.width / 3.0f, 4.0f * Screen.height / 5.0f, Screen.width / 3.0f, Screen.width / 3.0f), "Green")) {
			// Increment the value for the green colour component
			currentColour[1]++;
			
			// Increment the number of colours added by the player
			numColours++;
			
			// Assign the new colour to the player
			UpdatePlayerColour();
		}
		
		// Button to add blue to the colour
		if (GUI.Button(new Rect(2.0f * Screen.width / 3.0f, 4.0f * Screen.height / 5.0f, Screen.width / 3.0f, Screen.width / 3.0f), "Blue")) {
			// Increment the value for the blue colour component
			currentColour[2]++;
			
			// Increment the number of colours added by the player
			numColours++;
			
			// Assign the new colour to the player
			UpdatePlayerColour();
		}
	}

	void CreateDebugMenu() {
		if (debugEnabled) {
			// Reduce the current number of colours
			if (GUI.Button(new Rect(0.0f, Screen.height / 2.0f - Screen.height / 10.0f, Screen.height / 5.0f, Screen.height / 5.0f), "<")) {
				int colours = PlayerPrefs.GetInt("numColours");

				if (colours > 1) {
					PlayerPrefs.SetInt("numColours", colours - 1);

					// Reset the score upon changing the difficulty
					PlayerPrefs.SetInt("score", 0);

					// Create a new colour puzzle
					goalColour.CreateColour();
				}
			}

			// Increase the current number of colours
			if (GUI.Button(new Rect(Screen.width - Screen.height / 5.0f, Screen.height / 2.0f - Screen.height / 10.0f, Screen.height / 5.0f, Screen.height / 5.0f), ">")) {
				int colours = PlayerPrefs.GetInt("numColours");
				
				if (colours < 20) {
					PlayerPrefs.SetInt("numColours", colours + 1);

					// Reset the score upon changing the difficulty
					PlayerPrefs.SetInt("score", 0);

					// Create a new colour puzzle
					goalColour.CreateColour();
				}
			}

			GUIStyle style = new GUIStyle();
			style.normal.textColor = Color.white;
			style.fontSize = 16;
			style.alignment = TextAnchor.MiddleCenter;

			GUI.Box(new Rect(Screen.width / 2.0f - Screen.height / 10.0f, Screen.height / 2.0f - Screen.height / 10.0f, Screen.height / 5.0f, Screen.height / 5.0f), PlayerPrefs.GetInt("numColours").ToString(), style);
		}
	}

	void ClearPlayerColour() {
		// Clear the current colour array and start from scratch
		for (int i = 0; i < currentColour.Length; i++) {
			currentColour[i] = 0;
		}
		
		// Set the number of colours entered by the player to 0
		numColours = 0;
		
		// Assign the new colour to the player
		UpdatePlayerColour();
	}

	void UpdatePlayerColour() {
		// Determine the greates value in the colour list
		int maxColour = currentColour[0];

		for (int i = 1; i < currentColour.Length; i++) {
			if (currentColour[i] > maxColour) {
				maxColour = currentColour[i];
			}
		}

		// Calculate each colour as a percentage of white
		float r = (255.0f / maxColour) * currentColour[0];
		float g = (255.0f / maxColour) * currentColour[1];
		float b = (255.0f / maxColour) * currentColour[2];
		
		// Assign the colour to the cube (Observing the / by 255 requirement)		
		playerColour.SetColor("_Color", new Color(r / 255.0f, g / 255.0f, b / 255.0f));

		// Check to see if the player has won
		CheckWinCondition();
	}

	// Check to see if the player has created the correct colour
	void CheckWinCondition() {
		// Get the goal colour array
		int[] goal = goalColour.GetColourArray();

		// Create a boolean to see if the player has won
		bool winner = true;

		// Create and set an integer to hold the target ration for the comparison
		float ratio = 0;

		if (goal[0] != 0) {
			ratio = ((float)currentColour[0] / (float)goal[0]);
		} else if (goal[1] != 0) {
			ratio = ((float)currentColour[1] / (float)goal[1]);
		} else if (goal[2] != 0) {
			ratio = ((float)currentColour[2] / (float)goal[2]);
		}

		for (int i = 0; i < goal.Length; i++) {
			if (goal[i] != 0 && currentColour[i] != 0) {
				// Check that the colours are within the same ratio
				if ((int)((float)goal[i] * ratio) != currentColour[i]) {
					winner = false;
				} else if ((currentColour[i] % goal[i]) != 0 && (goal[i] % currentColour[i]) != 0) { 	// Check to see that the ratio is consistent
					winner = false;
				}
			} else if (currentColour[i] != goal[i]) {	// If one numer is zero, check the other one is too
				winner = false;
			}
		}

		if (winner) {
			HandleWinning();
		}
	}

	void HandleWinning() {
		// Increase the player's score
		PlayerPrefs.SetInt("score", PlayerPrefs.GetInt("score") + 1);

		// Create a new puzzle
		goalColour.CreateColour();

		// Clear the player's currently entered colour
		ClearPlayerColour();
	}
}
